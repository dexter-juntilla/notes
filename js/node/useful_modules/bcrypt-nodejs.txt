bcrypt.hash("bacon", null, null, function(err, hash) {
    // Store hash in your password DB.
});
 
// Load hash from your password DB.
bcrypt.compare("bacon", hash, function(err, res) {
    // res == true
});
bcrypt.compare("veggies", hash, function(err, res) {
    // res = false
});


genSaltSync(rounds)
	rounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)

genSalt(rounds, callback)
	rounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)
	callback - [REQUIRED] - a callback to be fired once the salt has been generated.
	error - First parameter to the callback detailing any errors.
	result - Second parameter to the callback providing the generated salt.

hashSync(data, salt)
	data - [REQUIRED] - the data to be encrypted.
	salt - [REQUIRED] - the salt to be used in encryption.

hash(data, salt, progress, cb)
	data - [REQUIRED] - the data to be encrypted.
	salt - [REQUIRED] - the salt to be used to hash the password.
	progress - a callback to be called during the hash calculation to signify progress
	callback - [REQUIRED] - a callback to be fired once the data has been encrypted.
	error - First parameter to the callback detailing any errors.
	result - Second parameter to the callback providing the encrypted form.

compareSync(data, encrypted)
	data - [REQUIRED] - data to compare.
	encrypted - [REQUIRED] - data to be compared to.

compare(data, encrypted, cb)
	data - [REQUIRED] - data to compare.
	encrypted - [REQUIRED] - data to be compared to.
	callback - [REQUIRED] - a callback to be fired once the data has been compared.
	error - First parameter to the callback detailing any errors.
	result - Second parameter to the callback providing whether the data and encrypted forms match [true | false].
	getRounds(encrypted) - return the number of rounds used to encrypt a given hash
	encrypted - [REQUIRED] - hash from which the number of rounds used should be extracted.