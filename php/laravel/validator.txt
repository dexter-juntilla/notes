#validator rules
-	accepted = <tag selected="selected">
-	active_url = uses PHP's checkdnsrr()
-	url = checks valid url format
-	after = accepts a date as parameter
-	alpha = alphabet characters
-	alpha_dash = alphabet, -, _
-	alpha_num = alphanumeric
-	before = accepts a date as parameter
-	betweeen = The 'between' rule accepts two parameters. The value that is being validated must have a size that exists between these two parameters. The type of comparison depends on the type of data being compared. For example, on numerical fields the comparison will be a mathematical one. On a string, the comparison will be based upon the length of the string in characters. On a file, the comparison will be based upon the size of the file in bytes.
-	confirmed = The 'confirmed' validation rule can be used to ensure that another field exists that matches the current name of the current field appended with _confirmation. 
-	data = valid date
-	date_format = The 'date_format' validation rule will ensure that our value is a date string that matches the format provided as a parameter.
-	email = valid email
-	exists = The 'exists' validation rule will ensure that the value is present within a database table identified by the rule parameter. The column that will be searched will be of the same name as the field being validated. Alternatively, you can provide an optional second parameter to specify a column name.
-	image = The 'image' validation rule will ensure that the file that has been uploaded is a valid image. For example, the extension of the file must be one of the following: .bmp, .gif, .jpeg or .png.
-	not_in = opposite of in
-	in = The 'in' validation rule will ensure that the value of the field matches one of the provided parameters.
 	'field' => 'in:red,brown,white'
- 	integer = integer
-	ip = The 'ip' validation rule will check to make sure that the value of the field contains a well formatted IP address.
-	min = The 'min' validation rule is the direct opposite of the 'max' rule
-	max = The 'max' validation rule is the exact opposite of the 'min' rule. It will ensure that the size of the field being validated is less than or equal to the supplied parameter. If the field is a string, the parameter will refer to the length of the string in characters. For numerical values, the comparison will be made mathematically. For file upload fields the comparison will be made upon the size of the file in bytes.
-	mimes = This rule will check the mime type of an uploaded file to ensure that it matches one of the parameters provided.  //'field' => 'mimes:pdf,doc,docx'
-	numeric = numeric
-	regex = //'field' => 'regex:[a-z]'
-	required = can be used to ensure that the current field exists within the validation data array.
-	required_if = The 'required_if' validation rule ensures that the current field must be present only if a field defined by the first parameter of the rule matches the value supplied by the second parameter. //'field' => 'required_if:username,zoidberg'
-	required_with = The 'required_with' is used to ensure that the current value is present only if one or more fields defined by the rule parameters are also present.
-	required_without = 
-	same = It is used to ensure that the value of the current field is the same as another field defined by the rule parameter.
-	size = same as min max
-	unique = The 'unique' rule ensures that the value of the current field is not already present within the database table defined by the rule parameter.
You can provide extra optional parameters to list a number of IDs for rows that will be ignored by the unique rule.
//'field' => 'unique:users,username,4,3,2,1'
