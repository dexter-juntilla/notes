#auto-generate test
phpunit-skelgen generate-test [--bootstrap="..."] class [class-source] [test-class] [test-source]

#phpunit.xml
<?xml version="1.0" encoding="UTF-8" ?>
<phpunit backupGlobals="true" backupStaticAttributes="false" strict="false" verbose="true">
	<php>
		<includePath>./Pear</includePath>
		<ini name="memory_limit" value="128M"/>
		<env name="ENVIRONMENT" value="test"/>
		<post name="is_test" value="1"/>
	</php>
	<filter>
		<blacklist>
			<directory suffix=".php">vendor/zendframework</directory>
			<directory suffix=".php">vendor/symfony</directory>
		</blacklist>
		<whitelist>
			<directory suffix=".php">src</directory>
		</whitelist>
	</filter>
</phpunit>

#CLI
	phpunit filenameTest.php
	phpunit ./DirectoryName
	phpunit --coverage-html destination/ Files/

#phpunit class/interface
	extend PHPUnit_Framework_TestCase
	implements PHPUnit_Framework_TestListener

#assertion
	assertGreaterThan() : Check the result to see if it’s larger than a value (there’s also LessThan, GreaterThanOrEqual, and LessThanOrEqual)
	assertContains(NEEDLE, HAYSTACK, OPTIONAL MESSAGE) : Check that the input contains a certain value
	assertInternalType() : Check that a variable is of a certain type
	assertInstanceOf() : Check that a variable is an instance of a certain type
	assertFileExists() : Verify that a file exists
	assertRegExp() : Check the input against a regular expression
	assertTrue() : This verifies that a condition is true
	assertFalse() : This verifies that a condition is false
	assertEquals(EXPECTED, ACTUAL, OPTIONAL MESSAGE) : This verifies that expected and actual values are equal,the same way as the PHP comparison operator ==
	assertSame() : This is similar to assertEquals() , but it checks whether values are identical, the same way as the === operator
	assertNull() : This verifies that value is null
	assertEmpty() : This verifies that value is empty, but it uses the PHPfunction empty() , which means empty can be false , null , '' , array()

#other methods 
	setUp() method is called before every test is executed
	tearDown() method is opposite to setUp() , and it is called when the test finishes
	setUpBeforeClass() and tearDownAfterClass() same as setup() and tearDown() but executed only once
	getMock() : creates a a mock object accepts the namespace of th class as a parameter
	setExpectedException('Exception');
	markTestSkipped('test skipped because of database connection problem');
	markTestIncomplete('test incomplete, finish this later');

#annotations
	@expectedException ExceptionName
	@requires extension pdo_sqlite
	@requires php 5.4.6
	@requires PHPUnit 3.7
	@requires function Imagick::readImage
	@return type
	@depend functionName // ensures that functionName is executed first before the dependent function
	@backupGlobals enabled|disabled // determines if the value of the global variable should change
	@dataProvider methodName // methodName must return an array of arrays or an object that implements Iterator. the elements will ne used as parameters for the dependent method

#test status
	. : As you can see in our case, a dot means the test is successful
	F : You get this result when a test has failed, or an assertion didn't match
	E : You get this result when an error is triggered during test execution
	S : You get this result when the test is skipped
	I : You get this result when the test is incomplete or not implemented yet

#test doubles

-	Dummy: This is just an empty shell which is not called or used; however, it is used only when you need to pass things such as required arguments.
-	Fake: This imitates the real object functionality, but is written and used only for tests.
-	Stub: This returns predefined values for the method that is called or null for other methods. Sometimes, they are also called indirect input to the tests.
-	Spy: This is similar to the stub. It just remembers returned values that can be verified later.
-	Mock: The simplest definition of this double is a stub with expectations. An expectation is the specification of the method on when and how it should be called during a test execution.

#sample use
    /**
     * Add two given values together and return sum
     * @assert (1,2) == 3
     */
    public function addValues($a, $b) {

        return $a + $b;
    }